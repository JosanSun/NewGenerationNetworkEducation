C++中的引用:

引用引入了对象的一个同义词。定义引用的表示方法与定义指针相似，只是用&代替了*。引用（reference）是c++对c语言的重要扩充。引用就是某

一变量（目标）的一个别名，对引用的操作与对变量直接操作完全一样。其格式为：类型 &引用变量名 = 已定义过的变量名。

引用的特点：

①一个变量可取多个别名。

②引用必须初始化。

③引用只能在初始化的时候引用一次 ，不能更改为转而引用其他变量。



①基础引用：
void TestReference1 ()  
{  
     int a = 1;  
     int& b = a;  
  
     cout<<"a:address->" <<&a<< endl;  
     cout<<"b:address->" <<&b<< endl;  
  
     a = 2;  
     b = 3;  
     int& c = b;// 引用一个引用变量，别名的别名  
     c = 4;  
}  

②const引用：
void TestReference2 ()  
{  
     int d1 = 4;  
     const int & d2 = d1;  
     d1 = 5;//d1改变，d2的值也会改变。  
     //d2 = 6;//不能给常量（不能被修改的量）赋值。  
  
     const int d3 = 1;  
     const int & d4 = d3;  
     //int&d5 = d3;  
     const int & d6 = 5;//常量具有常性，只有常引用可以引用常量  
  
     double d7 = 1.1;  
     //int& d8 = d7;//d7是double类型，d8是int，d7赋值给 d8时要生成一个临时变量  
                   //也就是说d8引用的是这个带有常性的临时变量，所以不能赋值。  
     const int& d9 = d7;  
}  

③引用作参数：
1.【值传递】如果形参为非引用的传值方式，则生成局部临时变量接收实参的值  
void Swap (int left, int right) //值传递的方式无法实现交换，因为传参时对于参数left和right拷贝一临时副本，交换的是副本值，因为其是临时变量函数退出，变量销 {                                //毁，并不会影响外部left和right的值。  
     int temp = left;  
     left = right ;  
     right = temp ;  
}  
  
2.【引用传递】如果形参为引用类型，则形参是实参的别名。  
void Swap (int& left, int& right)//使用引用的话，不做临时拷贝，&的使用说明此处只是原参数的另一个名字而已，所以修改时直接在原参数的基础上修改变量值。  
{  
     int temp = left;  
     right = left ;  
     left = temp ;  
}  
  
3.【指针传递】  
void Swap (int* pLeft, int* pRight)//传入的是地址，因为地址是唯一的，所以指针通过地址的访问进而可修改其内容。  
{  
     int temp = *pLeft;  
     *pLeft = *pRight;  
     *pRight = temp;  
}  

引用虽方便，使用须谨慎：
（1）&在这里不是求地址运算，而是起标识作用。

（2）类型标识符是指目标变量的类型。

（3）声明引用时，必须同时对其进行初始化。

（4）引用声明完毕后，相当于目标变量名有两个名称，即该目标原名称和引用名，且不能再把该引用名作为其他变量名的别名。

（5）对引用求地址，就是对目标变量求地址。即引用名是目标变量名的一个别名。引用在定义上是说引用不占据任何内存空间，但是编译器在一般将

其实现为const指针，即指向位置不可变的指针，所以引用实际上与一般指针同样占用内存。

（6）不能建立引用的数组。因为数组是一个由若干个元素所组成的集合，所以无法建立一个由引用组成的集合，但是可以建立数组的引用。

（7）引用常见的使用用途：作为函数的参数、函数的返回值。





总结：

1. 不要返回一个临时变量的引用。

2. 如果返回对象出了当前函数的作用域依旧存在，则最好使用引用返回，因为这样更高效。

* 引用和指针的区别和联系（笔试热点）

1. 引用只能在定义时初始化一次，之后不能改变指向其它变量（从一而终）；指针变量的值可变。

2. 引用必须指向有效的变量，指针可以为空。

3. sizeof指针对象和引用对象的意义不一样。sizeof引用得到的是所指向的变量的大小，而sizeof指针是对象地址的大小。

4. 指针和引用自增(++)自减(--)意义不一样。

5. 相对而言，引用比指针更安全。



指针比引用更为灵活，但是其风险也很大。使用指针时一定要检查指针是否为空(NULL)，且空间回收后指针最好置

零，以免野指针的发生造成内存泄漏等问题。







Ⅰ.引用和指针的区别和联系：

★不同点：

1. 指针是一个实体，而引用仅是个别名；

 2. 引用使用时无需解引用(*)，指针需要解引用；

 3. 引用只能在定义时被初始化一次，之后不可变；指针可变；

 4. 引用没有 const，指针有 const；const修饰的指针不可变；

 5. 引用不能为空，指针可以为空；

 6. “sizeof 引用”得到的是所指向的变量(对象)的大小，而“sizeof 指针”得到的是指针本身(所指向的变量或对象的地址)的大小；

7. 指针和引用的自增(++)运算意义不一样；

 8.从内存分配上看：程序为指针变量分配内存区域，而引用不需要分配内存区域。

★相同点：两者都是地址的概念，指针指向一块儿内存，其内容为所指内存的地址；引用是某块儿内存的别名。